package good;

import java.io.*;


class Date {
	private int month;
	private int day;
	private int year;


  public Date(int month, int day, int year) {

	  if(isValidDate(month, day, year)){
		  this.month = month;
		  this.day = day;
		  this.year = year;
	  }else{
		  System.out.println("your date is invalid! ");
		  System.exit(0);
	  }
	  
  }

  /** Constructs a Date object corresponding to the given string.
   *  @param s should be a string of the form "month/day/year" where month must
   *  be one or two digits, day must be one or two digits, and year must be
   *  between 1 and 4 digits.  If s does not match these requirements or is not
   *  a valid date, the program halts with an error message.
   */
  public Date(String s) {
	  String [] date = s.split("/");
		
		month = Integer.parseInt(date[0]);
		day = Integer.parseInt(date[1]);
		year = Integer.parseInt(date[2]);
		
		if(!isValidDate(month,day,year)){
			System.out.println("Error:month&date should be one or two digits, year should be one to four digits.");
			System.exit(0);
		}
  }




 public static boolean isLeapYear(int year) {
	if(year%4==0){
		if(year%100==0){
			if(year%400==0){
				return true;
			}
			return false;
		}
		return true;
	}
	return false;
 }


 public static int daysInMonth(int month, int year) {
		if(month == 2){
			if(isLeapYear(year)){
				return 29;
			}
			return 28;
		}
		if(month == 1 || month == 3 || month == 5 || month==7 || month==8||month ==10||month==12){
			return 31;
		}
		else return 30;	
 }


 public static boolean isValidDate(int month, int day, int year) {
	if(month >= 1 && month <= 12 && day >= 1 && day <= 31 && year > 0){
		return true;
	}
	return false;
 }



 public String toString() {
   return month+"/"+day+"/"+year;                    
 }


 public boolean isBefore(Date d) {
	if(this.year > d.year){
		return false;
	}
	if(this.year < d.year){
		return true;
	}
	else {
		if(this.month > d.month){
			return false;
		}
		if(this.month < d.month){
			return true;
		}
		else {
			if (this.day > d.day){
				return false;
			}
			if (this.day < d.day){
				return true;
			}
			return false;
		}
	}
 }


 public boolean isAfter(Date d) {
	if(isBefore(d) || (this.year == d.year && this.month == d.month && this.day == d.day)){
		return false;
	}
	return true;
 }

/** Returns the number of this Date in the year.
 *  @return a number n in the range 1...366, inclusive, such that this Date
 *  is the nth day of its year.  (366 is only used for December 31 in a leap
 *  year.)
 */
 public int dayInYear() {
	int days = 0;
	for(int i = 1; i < this.month; i++){
		days = days + daysInMonth(i, this.year);
	}
	days = days + this.day;
	return days;
 }

/** Determines the difference in days between d and this Date.  For example,
 *  if this Date is 12/15/1997 and d is 12/14/1997, the difference is 1.
 *  If this Date occurs before d, the result is negative.
 *  @return the difference in days between d and this date.
 */
 public int difference(Date d) {
	int dif = 0;
	if(this.isAfter(d)){
		if(this.year == d.year){
			dif = this.dayInYear( )- d.dayInYear();
		}
		else{
			dif = dif + (365 - d.dayInYear());   //第一年天数
			if(isLeapYear(d.year)){
				dif ++;
			}
			for (int yearInBetween = d.year + 1; yearInBetween < this.year; yearInBetween ++){
				dif = dif + 365;
				if(isLeapYear(yearInBetween)){
					dif ++;
				}                                 //中间年数*365
			}
			dif = dif + this.dayInYear();          //最后一年天数
		}
		return dif;
	}
	else if(this.isBefore(d)){
    	return -d.difference(this);
    }
	else{
		return 0;
	}               
 }







 public static void main(String[] argv) {
  System.out.println("\nTesting constructors.");
  Date d1 = new Date(1,1,3);
  System.out.println("Date should be 1/1/1: " + d1);
  d1 = new Date("2/4/2");
  System.out.println("Date should be 2/4/2: " + d1);
  d1 = new Date("2/29/2000");
  System.out.println("Date should be 2/29/2000: " + d1);
  d1 = new Date("2/29/1904");
  System.out.println("Date should be 2/29/1904: " + d1);

  d1 = new Date(12, 31, 1975);
  System.out.println("Date should be 12/31/1975: " + d1);
  Date d2 = new Date("1/1/1976");
  System.out.println("Date should be 1/1/1976: " + d2);
  Date d3 = new Date("1/2/1976");
  System.out.println("Date should be 1/2/1976: " + d3);

  Date d4 = new Date("2/27/1977");
  Date d5 = new Date("8/31/2110");
  
  Date d6 = new Date("2/29/2000");
  Date d7 = new Date("9/2/22");
  Date d8 = new Date("2/3/1906");
  Date d9 = new Date("11/11/1111");
  Date d10 = new Date(1, 1, 2001);
  
  System.out.println("\nTesting is Leap Year fucntion!");
  System.out.println(d6 + " :isLeapYear???: " + d6.isLeapYear(d6.year) + "!");
  System.out.println(d7 + " :isLeapYear???: " + d7.isLeapYear(d7.year) + "!");
  System.out.println(d8 + " :isLeapYear???: " + d8.isLeapYear(d8.year) + "!");
  System.out.println(d9 + " :isLeapYear???: " + d9.isLeapYear(d9.year) + "!");
  System.out.println(d10 + " :isLeapYear???: " + d10.isLeapYear(d10.year) + "!");
  

  /* I recommend you write code to test the isLeapYear function! */

  System.out.println("\nTesting before and after.");
  System.out.println(d2 + " after " + d1 + " should be true: " + 
                     d2.isAfter(d1));
  System.out.println(d3 + " after " + d2 + " should be true: " + 
                     d3.isAfter(d2));
  System.out.println(d1 + " after " + d1 + " should be false: " + 
                     d1.isAfter(d1));
  System.out.println(d1 + " after " + d2 + " should be false: " + 
                     d1.isAfter(d2));
  System.out.println(d2 + " after " + d3 + " should be false: " + 
                     d2.isAfter(d3));

  System.out.println(d1 + " before " + d2 + " should be true: " + 
                     d1.isBefore(d2));
  System.out.println(d2 + " before " + d3 + " should be true: " + 
                     d2.isBefore(d3));
  System.out.println(d1 + " before " + d1 + " should be false: " + 
                     d1.isBefore(d1));
  System.out.println(d2 + " before " + d1 + " should be false: " + 
                     d2.isBefore(d1));
  System.out.println(d3 + " before " + d2 + " should be false: " + 
                     d3.isBefore(d2));

  System.out.println("\nTesting difference.");
  System.out.println(d1 + " - " + d1  + " should be 0: " + 
                     d1.difference(d1));
  System.out.println(d2 + " - " + d1  + " should be 1: " + 
                     d2.difference(d1));
  System.out.println(d3 + " - " + d1  + " should be 2: " + 
                     d3.difference(d1));
  System.out.println(d3 + " - " + d4  + " should be -422: " + 
                     d3.difference(d4));
  System.out.println(d5 + " - " + d4  + " should be 48762: " + 
                     d5.difference(d4));
 }

}
